nextflow_workflow {

    name "Test Workflow QC_Reads_Raw"
    script "subworkflows/qc_reads_raw.nf"
    workflow "QC_Reads_Raw"

    test("QC_Reads_Raw succeeds -- SE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()
        def refs       = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        lane:         "${readsLane1.getLane()}",
                        readType:     "${readsLane1.getReadType()}"
                    ],
                    [
                        file("${readsLane1.getR1()}")
                    ]
                ]
                input[1] = file("${refs.getGenomeIndex()}")
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 3

            // test output for full MultiQC
            assert workflow.out.multiqc
            with(workflow.out.multiqc.get(0)) {
                assert size() == 2
                assert get(0) ==~ /^.*\/${readsLane1.getR1SimpleName()}_fastqc.zip/
                assert get(1) ==~ /^.*\/${readsLane1.getStemName()}_seq-depth.txt/
            }
        }

    }

    test("QC_Reads_Raw succeeds -- PE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()
        def refs       = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        lane:         "${readsLane1.getLane()}",
                        readType:     "${readsLane1.getReadType()}"
                    ],
                    [
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ]
                ]
                input[1] = file("${refs.getGenomeIndex()}")
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 3

            // test output for full MultiQC
            assert workflow.out.multiqc
            with(workflow.out.multiqc.get(0)) {
                assert size() == 3
                assert get(0) ==~ /^.*\/${readsLane1.getR1SimpleName()}_fastqc.zip/
                assert get(1) ==~ /^.*\/${readsLane1.getR2SimpleName()}_fastqc.zip/
                assert get(2) ==~ /^.*\/${readsLane1.getStemName()}_seq-depth.txt/
            }
        }

    }

}
