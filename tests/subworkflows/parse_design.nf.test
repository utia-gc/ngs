nextflow_workflow {

    name "Test Workflow Parse_Design"
    script "subworkflows/parse_design.nf"
    workflow "Parse_Design"

    test("Parse_Design successfully creates read channels from single-end samplesheet.") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = "https://github.com/trev-f/SRAlign-test/raw/rnaseq/samplesheets/samplesheet_se.csv"
                """
            }
        }

        then {
            assert workflow.success
            assert workflow.out.samples.size() == 2
            assert snapshot(workflow.out).match()
        }

    }

    test("Parse_Design successfully creates read channels from paired-end samplesheet.") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = "https://github.com/trev-f/SRAlign-test/raw/rnaseq/samplesheets/samplesheet_pe.csv"
                """
            }
        }

        then {
            assert workflow.success
            assert workflow.out.samples.size() == 2
            assert snapshot(workflow.out).match()
        }

    }

    test("Parse_Design successfully creates read channels from mixed single-end and paired-end samplesheet.") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = "https://github.com/trev-f/SRAlign-test/raw/rnaseq/samplesheets/samplesheet_mix.csv"
                """
            }
        }

        then {
            assert workflow.success
            assert workflow.out.samples.size() == 4
            assert snapshot(workflow.out).match()
        }

    }

    test("Parse_Design successfully creates read channels with lanes and sample numbers -- SE + PE reads.") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = 'https://github.com/utia-gc/ngs-test/raw/ngs/samplesheets/samplesheet_lanes_mix.csv'
                """
            }
        }

        then {
            // test workflow success
            assert workflow.success

            // test expected number samples
            assert workflow.out.samples.size() == 4

            // test reproducibility
            assert snapshot(workflow.out).match()
        }

    }

}
