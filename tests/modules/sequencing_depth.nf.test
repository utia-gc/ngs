nextflow_process {

    name "Test Process sequencing_depth"
    script "modules/sequencing_depth.nf"
    process "sequencing_depth"

    test("sequencing_depth writes file of sequencing depth -- SE reads") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()
        def refs       = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        lane:         "${readsLane1.getLane()}",
                        readType:     "${readsLane1.getReadType()}"
                    ],
                    [
                        file("${readsLane1.getR1()}"),
                    ],
                    [
                        file("${readsLane1.getR2()}"),
                    ]
                ]
                input[1] = file("${refs.getGenomeIndex()}")
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test expected sequencing depth file made
            with(process.out.depth) {
                assert size() == 1
                assert get(0) ==~ /^.*\/${readsLane1.getSampleName()}_L${readsLane1.getLane()}_seq-depth.txt/
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }

    test("sequencing_depth writes file of sequencing depth -- SE reads no lane info") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()
        def refs       = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        readType:     "${readsLane1.getReadType()}"
                    ],
                    [
                        file("${readsLane1.getR1()}"),
                    ],
                    [
                        file("${readsLane1.getR2()}"),
                    ]
                ]
                input[1] = file("${refs.getGenomeIndex()}")
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test expected sequencing depth file made
            with(process.out.depth) {
                assert size() == 1
                assert get(0) ==~ /^.*\/${readsLane1.getSampleName()}_seq-depth.txt/
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }

    test("sequencing_depth writes file of sequencing depth -- PE reads") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()
        def refs       = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        lane:         "${readsLane1.getLane()}",
                        readType:     "${readsLane1.getReadType()}"
                    ],
                    [
                        file("${readsLane1.getR1()}"),
                    ],
                    [
                        file("${readsLane1.getR2()}"),
                    ]
                ]
                input[1] = file("${refs.getGenomeIndex()}")
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test expected sequencing depth file made
            with(process.out.depth) {
                assert size() == 1
                assert get(0) ==~ /^.*\/${readsLane1.getSampleName()}_L${readsLane1.getLane()}_seq-depth.txt/
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }

}
