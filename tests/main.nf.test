nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"

    test("main.nf succeeds with default `nf_test` params") {
        // instantiate helper objects
        def readsSELane1 = new ReadsSELane1()
        def readsSELane2 = new ReadsSELane2()
        def readsPELane1 = new ReadsPELane1()
        def readsPELane2 = new ReadsPELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 36

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/reads/trim/${readsSELane1.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/reads/trim/${readsSELane2.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/reads/trim/${readsPELane1.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/reads/trim/${readsPELane2.getStemName()}_cutadapt-log.txt").exists()
            // test samtools stats and samtools idxstats files written to reports dir
            assert path("${params.publishDirReports}/alignments/${readsSELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsSELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsSELane1.getStemName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsSELane2.getStemName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane1.getStemName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane2.getStemName()}_samtools-stats.txt").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads_raw/reads_raw.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads_raw/reads_raw_data/").exists()
            assert path("${params.publishDirReports}/multiqc/reads_prealign/reads_prealign.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads_prealign/reads_prealign_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/variant_calling/variant_calling.html").exists()
            assert path("${params.publishDirReports}/multiqc/variant_calling/variant_calling_data/").exists()
        }

    }

    test("main.nf succeeds with default `nf_test` params and uncompressed genome and annotation files.") {
        // instantiate helper objects
        def readsSELane1 = new ReadsSELane1()
        def readsSELane2 = new ReadsSELane2()
        def readsPELane1 = new ReadsPELane1()
        def readsPELane2 = new ReadsPELane2()
        def refs         = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                genome            = "${refs.getGenome()}"
                annotations       = "${refs.getGTF()}"
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 34

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/reads/trim/${readsSELane1.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/reads/trim/${readsSELane2.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/reads/trim/${readsPELane1.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/reads/trim/${readsPELane2.getStemName()}_cutadapt-log.txt").exists()
            // test samtools stats and samtools idxstats files written to reports dir
            assert path("${params.publishDirReports}/alignments/${readsSELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsSELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsSELane1.getStemName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsSELane2.getStemName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane1.getStemName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane2.getStemName()}_samtools-stats.txt").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads_raw/reads_raw.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads_raw/reads_raw_data/").exists()
            assert path("${params.publishDirReports}/multiqc/reads_prealign/reads_prealign.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads_prealign/reads_prealign_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/variant_calling/variant_calling.html").exists()
            assert path("${params.publishDirReports}/multiqc/variant_calling/variant_calling_data/").exists()
        }

    }

    test("main.nf succeeds -- fastp.") {
        // instantiate helper objects
        def readsSELane1 = new ReadsSELane1()
        def readsSELane2 = new ReadsSELane2()
        def readsPELane1 = new ReadsPELane1()
        def readsPELane2 = new ReadsPELane2()

        when {
            params {
                load("${baseDir}/tests/params/fastp.yaml")
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 36

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/reads/trim/${readsSELane1.getStemName()}_fastp-log.json").exists()
            assert path("${params.publishDirReports}/reads/trim/${readsSELane2.getStemName()}_fastp-log.json").exists()
            assert path("${params.publishDirReports}/reads/trim/${readsPELane1.getStemName()}_fastp-log.json").exists()
            assert path("${params.publishDirReports}/reads/trim/${readsPELane2.getStemName()}_fastp-log.json").exists()
            // test samtools stats and samtools idxstats files written to reports dir
            assert path("${params.publishDirReports}/alignments/${readsSELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsSELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsSELane1.getStemName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsSELane2.getStemName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane1.getStemName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/alignments/${readsPELane2.getStemName()}_samtools-stats.txt").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads_raw/reads_raw.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads_raw/reads_raw_data/").exists()
            assert path("${params.publishDirReports}/multiqc/reads_prealign/reads_prealign.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads_prealign/reads_prealign_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/variant_calling/variant_calling.html").exists()
            assert path("${params.publishDirReports}/multiqc/variant_calling/variant_calling_data/").exists()
        }

    }

}
